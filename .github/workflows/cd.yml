name: Continuous Delivery

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
  push:
    branches:
      - main
      - develop

env:
  GCP_PROJECT_ID: challenge-mle-dam
  GCP_ARTIFACT_REGISTRY_REGION: us-central1 
  GCP_ARTIFACT_REGISTRY_REPO: challenge-mle-dam
  IMAGE_NAME: challenge-mle-dam
  CLOUD_RUN_SERVICE_NAME: challenge-mle-dam
  CLOUD_RUN_REGION: us-central1

jobs:
  cd-staging:
    name: Deploy to Staging
    if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'develop' || github.event_name == 'push' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ env.GCP_PROJECT_ID }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider'
          service_account: 'github-actions-deployer@challenge-mle-dam.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev

      - name: Build and Push Docker Image (Staging)
        env:
          IMAGE_TAG: develop-${{ github.sha }}
        run: |
          docker build -t ${{ env.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
          docker push ${{ env.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Deploy to Cloud Run (Staging)
        id: deploy_staging
        env:
          IMAGE_TAG: develop-${{ github.sha }}
          STAGING_SERVICE_NAME: ${{ env.CLOUD_RUN_SERVICE_NAME }}-staging
        run: |
          gcloud run deploy ${{ env.STAGING_SERVICE_NAME }} \
            --image ${{ env.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --platform managed \
            --region ${{ env.CLOUD_RUN_REGION }} \
            --allow-unauthenticated \
            --port 8000 \
            --quiet \
            --format='value(status.url)'
      
      - name: Staging Smoke Test
        env:
          STAGING_URL: ${{ steps.deploy_staging.outputs.result }}
        run: |
          echo "Staging URL: $STAGING_URL"
          curl --fail --retry 5 --retry-delay 10 "$STAGING_URL/health"

  cd-production:
    name: Deploy to Production
    if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' || github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: cd-staging
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ env.GCP_PROJECT_ID }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider'
          service_account: 'github-actions-deployer@challenge-mle-dam.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev

      - name: Build and Push Docker Image (Production)
        env:
          IMAGE_TAG_SHA: prod-${{ github.sha }}
          IMAGE_TAG_LATEST: latest
        run: |
          docker build -t ${{ env.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_SHA }} \
                       -t ${{ env.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }} .
          docker push ${{ env.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_SHA }}
          docker push ${{ env.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }}

      - name: Deploy to Cloud Run (Production)
        id: deploy_prod
        env:
          IMAGE_TAG_SHA: prod-${{ github.sha }}
        run: |
          gcloud run deploy ${{ env.CLOUD_RUN_SERVICE_NAME }} \
            --image ${{ env.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_SHA }} \
            --platform managed \
            --region ${{ env.CLOUD_RUN_REGION }} \
            --allow-unauthenticated \
            --port 8000 \
            --quiet \
            --format='value(status.url)'
          
      - name: Production Smoke Test
        env:
          PROD_URL: ${{ steps.deploy_prod.outputs.result }}
        run: |
          echo "Production URL: $PROD_URL"
          curl --fail --retry 5 --retry-delay 10 "$PROD_URL/health"
