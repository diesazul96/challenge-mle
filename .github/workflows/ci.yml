name: Continuous Integration

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  GCP_PROJECT_ID: YOUR_PROJECT_ID
  GCP_ARTIFACT_REGISTRY_REGION: YOUR_REGION # e.g., us-central1
  GCP_ARTIFACT_REGISTRY_REPO: YOUR_REPO_NAME # Your Artifact Registry repo name
  IMAGE_NAME: YOUR_IMAGE_NAME # e.g., flight-delay-api
  CLOUD_RUN_SERVICE_NAME: YOUR_MAIN_SERVICE_NAME # e.g., flight-delay-api
  CLOUD_RUN_REGION: YOUR_CLOUD_RUN_REGION # e.g., us-central1

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true # Optional: creates .venv in project

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Activate venv for subsequent steps (if needed by linters/etc)
        run: source .venv/bin/activate # May not be strictly needed if using poetry run

      - name: Lint with Ruff (or Flake8/Black)
        run: poetry run ruff check . && poetry run ruff format --check .
        # Or: poetry run flake8 && poetry run black --check .

      - name: Run tests with Pytest
        run: poetry run pytest # Or your `make api-test` if adapted for CI

      - name: Security Scan with Bandit (example)
        run: poetry run bandit -r ./challenge

      - name: Test Docker build
        run: docker build -t temp-image-test .